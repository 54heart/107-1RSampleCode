getwd()
# Craete variable called my.height.cm with your actual height in cm
my.height.cm <- 176
# Craete variable called my.weight.cm with your actual weight in kg
my.weight.kg <- 69
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Use if-else to print matched information
# Reference: http://www.tpech.gov.taipei/ct.asp?xItem=1794336&CtNode=30678&mp=109171
if (my.bmi >= 35) {
print(paste("Your bmi: ", my.bmi))
print("重度肥胖!")
} else if (my.bmi >= 30) {
print(paste("Your bmi: ", my.bmi))
print("中度肥胖!")
} else if (my.bmi >= 27) {
print(paste("Your bmi: ", my.bmi))
print("輕度肥胖!")
} else if (my.bmi >= 24) {
print(paste("Your bmi: ", my.bmi))
print("過重!")
} else if (my.bmi >= 18.5) {
print(paste("Your bmi: ", my.bmi))
print("正常範圍")
} else {
print(paste("Your bmi: ", my.bmi))
print("過輕!")
}
# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
# Print course information
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
# 基本變數資訊
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
# 使用data.frame()，並以上述4個向量建立person.df
person.df <- data.frame(person.name, person.sex, person.id, person.days)
# 查看person.df結構
str(person.df)
# 查看person.df summary
summary(person.df)
# 印出person.df
person.df
# 印出person.df第一列
person.df[1, ]
# 印出person.df第二列第三欄
person.df[2, 3]
# 使用$ 指定出person.df中person.id欄位
person.df$person.id
# 使用order(), 將person.df$person.days排序後, 建立days.position
days.postion <- order(person.df$person.days)
# 使用days.postion, 排序person.df
person.df[days.postion, ]
# 使用grepl()，找出person.df$person.id中有520精神的
spirit.520 <- grepl("520", person.df$person.id)
# 篩選出520家族的成員
person.df[spirit.520, ]
getwd()
setwd("~/Documents/大三上/資料科學助教/107-1RSampleCode/week_1")
# 查看內建資料集: 鳶尾花(iris)資料集
iris
# 使用dim(), 回傳iris的列數與欄數
dim(iris)
# 使用head() 回傳iris的前六列
head(iris)
# 使用tail() 回傳iris的後六列
tail(iris)
# 使用str()
str(iris)
# 使用summary() 查看iris敘述性統計、類別型資料概述。
summary(iris)
# 使用for loop 印出九九乘法表
# Ex: (1x1=1 1x2=2...1x9=9 ~ 9x1=9 9x2=18... 9x9=81)
for (i in c(1:9)) {
for (j in c(1:9)) {
print(paste(i, "x", j, "=", i * j))
}
}
# 使用sample(), 產出10個介於10~100的整數，並存在變數 nums
nums <- sample(10:100, 10)
# 查看nums
nums
# 1.使用for loop 以及 if-else，印出大於50的偶數，並提示("偶數且大於50": 數字value)
# 2.特別規則：若數字為66，則提示("太66666666666了")並中止迴圈。
for (num in nums) {
if (num == 66) {
print("太66666666666了")
break
} else if ((num %% 2 == 0) && (num > 50)) {
print(paste("偶數且大於50：", num))
}
}
# 請寫一段程式碼，能判斷輸入之西元年分是否為閏年
year <- 2100
ifelse(year %% 4 == 0 && year %% 100 != 0 || year %% 400 == 0, "是閏年", "不是閏年")
# 無註解版
ans <- sample(0:9, 4)
guess.count <- 0
repeat {
print("Please input 4 non-repetitive numbers.[integers between 0 to 9, aka c(0:9)")
guess <- scan(nmax = 4)
a <- b <- 0
if (!any(duplicated(guess))){
guess.count <- guess.count + 1
for (i in 1:4) {
if (guess[i] == ans[i]) {
a <- a + 1
} else {
for (j in 1:4) {
if (guess[i] == ans[j]) {
b <- b + 1
}
}
}
}
cat("==== Your guess :", guess, ", Match : ", a, "A", b, "B\n")
if (a == 4) {
cat("==== CORRECT! You guess for", guess.count, "times")
break
}
} else {
cat("==== Input Error: Please input 4 <non-repetitive> numbers.\n")
}
}
q()
